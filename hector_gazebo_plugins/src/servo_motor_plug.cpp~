#include <hector_gazebo_plugins/servo_motor_plug.h>

namespace gazebo
{
        void ServoMotorPlugin::CallbackReferencias(tilt_srv::Ref msg)
	{
		refvalue = msg.ref;
		std::cout << refvalue<< std::endl;
	}

	float ServoMotorPlugin::position_controller(float r, float y)
	{
		try
		{
			static float e_old = 0, u = 0 ;
			float e = r-y;
			u = Kpx*e-Kiv*e_old;
			//u=u+Kpx*e-Kix*e_old;
			e_old=e;
			return u;
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		}
	}

	float ServoMotorPlugin::velocity_controller(float r, float y)
	{
		try
		{
			static float e_old = 0, u = 0, torqueantes = 0;
			float e = r-y;
			u=u+Kpv*e-Kiv*e_old;
			torque = u;
			e_old=e;
			return u;
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		}
	}

	float ServoMotorPlugin::velocity_feedforward(float r)
	{
		try
		{
			static float y = 0;
			y=0.6439*y+0.3561*r; 
			return y;
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		}
	}
	
	int16_t ServoMotorPlugin::saturate(float x, const float max)
	{
		try
		{
			if (x>max)
				x=max;
			else if (x<(-max))
				x=-max;
			if (x>0) x+=0.5;
			if (x<0) x-=0.5;
	
			return (int16_t)x;
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		}
	}
	
	ServoMotorPlugin::ServoMotorPlugin()
	{ 
		try
		{
			path = ros::package::getPath("hector_gazebo_plugins");
			DOMConfigurator::configure(path+"/LogConfig/Log4cxxConfig_servo.xml");
		}
		catch(std::exception& e)
		{
			std::cout << e.what() << std::endl;
		}
		torque = 0;
	}

	ServoMotorPlugin::~ServoMotorPlugin()
	{	
		try
		{
			updateTimer.Disconnect(updateConnection);
			ros::shutdown();
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		} 
	}

	void ServoMotorPlugin::Load(physics::ModelPtr _model, sdf::ElementPtr _sdf)
	{	
		try
		{
	    		if (!ros::isInitialized())
	    		{
				LOG4CXX_ERROR (loggerMyMain, "Nao inicializado!");
	      		        return;
	    		}

			Kpx = 0.01;
			Kpv = 0.01;
			Kix = 0.01;
			Kiv = 0.01;
			Kdx = 0;
			Kdv = 0;
			Modo_ = "Posição";
			refvalue = 0;
			ang = 0;
			vel_ang = 0;

			if (_sdf->HasElement("NameOfNode")) { 	NameOfNode_ = _sdf->GetElement("NameOfNode")->Get<std::string>();}
			else {  std::cout << "Coloque o nome do No: <NameOfNode> x </NameOfNode>" << std::endl;
				return;}
		
			ros::NodeHandle cp_node_handle_(NameOfNode_);
			node_handle_ = cp_node_handle_;

			if (_sdf->HasElement("NameOfJoint")) { 	NameOfJoint_ = _sdf->GetElement("NameOfJoint")->Get<std::string>();}
			else {  std::cout << "Coloque o nome da Junta: <NameOfJoint> x </NameOfJoint>" << std::endl;
				return;}

			if (_sdf->HasElement("TopicSubscriber")){ TopicSubscriber_ = _sdf->GetElement("TopicSubscriber")->Get<std::string>();}		
			else{	std::cout << "Coloque o nome do tópico a ser lido: <TopicSubscriber> x </TopicSubscriber>" << std::endl;
				return;	}

			if (_sdf->HasElement("TopicPublisher")){ TopicPublisher_ = _sdf->GetElement("TopicPublisher")->Get<std::string>();}		
			else {	std::cout << "Coloque o nome do tópico a ser publicado: <TopicPublisher> x </TopicPublisher>" << std::endl;
				return; }

			if (_sdf->HasElement("Kpx"))     Kpx = _sdf->GetElement("Kpx")->Get<double>();
			if (_sdf->HasElement("Kpv"))     Kpv = _sdf->GetElement("Kpv")->Get<double>();
			if (_sdf->HasElement("Kix"))     Kix = _sdf->GetElement("Kix")->Get<double>();
			if (_sdf->HasElement("Kiv"))     Kiv = _sdf->GetElement("Kiv")->Get<double>();
			if (_sdf->HasElement("Kdx"))     Kdx = _sdf->GetElement("Kdx")->Get<double>();
			if (_sdf->HasElement("Kdv"))     Kdv = _sdf->GetElement("Kdv")->Get<double>();


			if (_sdf->HasElement("Modo"))     Modo_ = _sdf->GetElement("Modo")->Get<std::string>(); 
			std::cout << _sdf->GetElement("Modo")->Get<std::string>() << std::endl;

			world = _model->GetWorld();	
			junta = _model-> GetJoint(NameOfJoint_);

			motor_subscriber_ = node_handle_.subscribe(TopicSubscriber_, 1, &gazebo::ServoMotorPlugin::CallbackReferencias, this);
			motor_publisher_ = node_handle_.advertise<tilt_srv::Sensor>(TopicPublisher_, 5);
			DataMotorService = node_handle_.advertiseService(TopicPublisher_ + "/ValoresMotores",&ServoMotorPlugin::ValuesOfMotor,this);
	  		Reset();
			updateTimer.Load(world, _sdf);
	  		updateConnection = updateTimer.Connect(boost::bind(&ServoMotorPlugin::Update, this));
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		}
	}

	void ServoMotorPlugin::Reset()
	{
		try
		{
			updateTimer.Reset();
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		}
	}

	void ServoMotorPlugin::Update()
	{
		try
		{
		boost::mutex::scoped_lock scoped_lock(lock);
			sensor.ang = junta->GetAngle(0).Radian();
			ang = sensor.ang;
			sensor.vel_ang = junta->GetVelocity(0); 
			vel_ang = sensor.vel_ang;
		
			if (Modo_ == "Posição")
			{
				torque = position_controller(refvalue, ang); 
				junta->SetForce(0,torque);
			}
			else if (Modo_ == "Velocidade")
			{
				torque= velocity_controller(refvalue, vel_ang);
				junta->SetForce(0,torque);
			}
			else if (Modo_ == "Torque")
			{
				std::cout<<"Torque" << std::endl;
				std::cout<< refvalue << std::endl;
				torque = refvalue;
				junta->SetForce(0,torque);
			}

			sensor.torque = torque;
			motor_publisher_.publish(sensor);

			ros::spinOnce();
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
		}
	}
	
	bool ServoMotorPlugin::ValuesOfMotor(tilt_srv::Sensor_srv::Request &req, tilt_srv::Sensor_srv::Response &res)
	{
		try
		{
			boost::mutex::scoped_lock scoped_lock(lock);
			res.ang = sensor.ang;
			res.vel_ang = sensor.vel_ang;
			res.torque = sensor.torque;
			return true;
		}
		catch(std::exception& e)
		{
			LOG4CXX_ERROR (loggerMyMain, e.what());
			return false;
		}
	}



	GZ_REGISTER_MODEL_PLUGIN(ServoMotorPlugin)
}
